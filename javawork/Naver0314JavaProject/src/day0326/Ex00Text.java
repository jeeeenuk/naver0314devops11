package day0326;
/*
    다형성이란 ?
    동일한 메시지(메서드 호출)에 대해 서로 다른 객체가 다르게 동작하는 능력(message polymorphism)을 뜻한다.
    다형성은 한가지 타입 또는 인터페이스를 여러 개의 구현체가 가질 수 있도록 함으로써 유연하고 확장 가능한 코드를 작설할 수 있게 해준다.

    1. 업케스팅(Upcasting) :  자식 클래스의 인스턴스를 부모 클래스의 참조 변수로 참조하는 것을 말한다.
                            부모 클래스의 참조 변수를 통해 자식 클래스의 객체에 접근할 수 있다.
                            업캐스팅을 통해 여러개의 자식 클래스를 하나의 부모 클래스 타입으로 관리할 수 있다.
    2. 메서드 오버라이딩 (Method Overriding) :  자식 클래스에서 부모 클래스의 메서드를 재정의하여 자식 클래스에서 특화된 구현을 제공한다.
                                            부모 클래ㅡ의 메서드를 자식 클래스에서 동일한 이름으로 재정의하면, 실행 시에는 실제 객체의
                                            타입에 맞는 메서드가 호출된다.
    3. 다형적 변수(Polymorphic Variables) : 부모 클래스의 참조 변수를 사용하여 여러 자식 클래스의 객체를 참조할 수 있다.
                                          이렇게 다형적 변수를 사용하면 실행 시에 실제 객체의 타입에 따라 다른 동작을 수행할 수 있다.

    Interface 에서는 final 또는 abstract 를 붙여서 사용하지 않는다. (생략 가능) !!
    이유는 Interface 에 들어오는 값들은 무조건 상수와 추상메서드로 등록 되기 때문이다.
    Interface 의 경우 음식점의 메뉴판과 같다고 표현한다. 메뉴판을 보고 고객이 원하는 음식을 요청하게 되는데, 이때 메뉴판 자체가 음식을 주지 않기 떄문
    ** 구현 가능한 목록을 "나열" 만 해준다.

    [접근제한] interface [인터페이스명]{
        상수; (final)
        추상메서드; (abstract)
    }

    인터페이스간의 상속 : class 간의 상속과 다르게 실제 구현력이 없는 인터페이스들 간의 상속에서는 "다중 상속" 이 가능하다 !

    [접근제한] interface [인터페이스명] extends 부모인터페이스명1, 부모인터페이스명2, ... {
        상수; (final)
        추상메서드; (abstract)
    }
 */
